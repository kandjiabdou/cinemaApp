name: 🚀 CI/CD Pipeline - Cinema App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Tests basiques
  tests:
    name: 🧪 Tests & Validations
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📋 Validate project structure
        run: |
          echo "🔍 Vérification de la structure du projet..."
          
          # Vérifier que tous les services existent
          for service in api-gateway auth-service cinema-service public-service frontend-app; do
            if [ -d "$service" ]; then
              echo "✅ $service exists"
            else
              echo "❌ $service directory not found"
              exit 1
            fi
          done
          
          # Vérifier les fichiers de configuration
          if [ -f "docker-compose.yml" ]; then
            echo "✅ docker-compose.yml exists"
          else
            echo "❌ docker-compose.yml not found"
            exit 1
          fi
          
          echo "🎉 Structure validation completed!"

      - name: 🧪 Test Frontend Dependencies
        working-directory: ./frontend-app
        run: |
          if [ -f "package.json" ]; then
            echo "📦 Installing frontend dependencies..."
            npm install
            echo "✅ Frontend dependencies installed"
            
            echo "🏗️ Testing frontend build..."
            npm run build
            echo "✅ Frontend build successful"
          else
            echo "⚠️ No frontend package.json found"
          fi

      - name: 🧪 Test Backend Services
        run: |
          echo "🔍 Testing backend services..."
          
          for service in api-gateway auth-service cinema-service public-service; do
            if [ -f "$service/package.json" ]; then
              echo "📦 Testing $service..."
              cd $service
              npm install
              echo "✅ $service dependencies installed"
              cd ..
            else
              echo "⚠️ No package.json found for $service"
            fi
          done

  # Job 2: Build Docker Images (sans push)
  build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: tests
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, cinema-service, public-service, frontend-app]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Build Docker image - ${{ matrix.service }}
        run: |
          echo "🏗️ Building Docker image for ${{ matrix.service }}..."
          if [ -f "${{ matrix.service }}/Dockerfile" ]; then
            docker build -t cinema-${{ matrix.service }}:test ./${{ matrix.service }}
            echo "✅ Docker build successful for ${{ matrix.service }}"
          else
            echo "⚠️ No Dockerfile found for ${{ matrix.service }}"
          fi

  # Job 3: Tests de base avec Docker Compose
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Start services with Docker Compose
        run: |
          echo "🚀 Starting services..."
          docker-compose up -d --build
          
          # Attendre que les services soient prêts
          echo "⏳ Waiting for services to be ready..."
          sleep 60

      - name: 🧪 Basic health checks
        run: |
          echo "🔍 Testing basic connectivity..."
          
          # Vérifier que les conteneurs sont en cours d'exécution
          docker-compose ps
          
          # Tests basiques sans dépendances externes
          echo "✅ Docker Compose setup completed"

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          docker-compose down
          docker system prune -f

  # Job 4: Notification finale
  notify:
    name: 📢 Pipeline Status
    runs-on: ubuntu-latest
    needs: [tests, build, integration]
    if: always()
    
    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "📊 RÉSUMÉ DU PIPELINE CI/CD"
          echo "=========================="
          echo ""
          
          if [[ "${{ needs.tests.result }}" == "success" ]]; then
            echo "✅ Tests & Validations: PASSED"
          else
            echo "❌ Tests & Validations: FAILED"
          fi
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Docker Build: PASSED"
          else
            echo "❌ Docker Build: FAILED"
          fi
          
          if [[ "${{ needs.integration.result }}" == "success" ]]; then
            echo "✅ Integration Tests: PASSED"
          else
            echo "❌ Integration Tests: FAILED"
          fi
          
          echo ""
          echo "🎯 Pipeline terminé à $(date)"
          
          # Échouer si un test critique a échoué
          if [[ "${{ needs.tests.result }}" != "success" ]]; then
            echo "💥 Pipeline failed due to test failures"
            exit 1
          fi 