name: 🧪 Test Pipeline - Cinema App

on:
  workflow_dispatch:  # Permet de déclencher manuellement
  push:
    branches: [ develop, feature/* ]

jobs:
  # Job 1: Validation basique
  validate:
    name: 📋 Validate Project
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check project structure
        run: |
          echo "🔍 Vérification de la structure du projet..."
          
          # Vérifier que tous les services existent
          for service in api-gateway auth-service cinema-service public-service frontend-app; do
            if [ -d "$service" ]; then
              echo "✅ $service exists"
              if [ -f "$service/package.json" ]; then
                echo "✅ $service has package.json"
              else
                echo "⚠️ $service missing package.json"
              fi
              if [ -f "$service/Dockerfile" ]; then
                echo "✅ $service has Dockerfile"
              else
                echo "⚠️ $service missing Dockerfile"
              fi
            else
              echo "❌ $service directory not found"
              exit 1
            fi
          done
          
          # Vérifier les fichiers de configuration
          if [ -f "docker-compose.yml" ]; then
            echo "✅ docker-compose.yml exists"
          else
            echo "❌ docker-compose.yml not found"
            exit 1
          fi
          
          echo "🎉 Structure validation completed!"

  # Job 2: Test Build Simple
  test-build:
    name: 🏗️ Test Docker Build
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        service: [api-gateway, frontend-app]  # Tester seulement 2 services critiques
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Test Docker build - ${{ matrix.service }}
        run: |
          echo "🐳 Testing Docker build for ${{ matrix.service }}..."
          if [ -f "${{ matrix.service }}/Dockerfile" ]; then
            docker build -t test-${{ matrix.service }}:latest ./${{ matrix.service }}
            echo "✅ Docker build successful for ${{ matrix.service }}!"
          else
            echo "⚠️ No Dockerfile found for ${{ matrix.service }}"
          fi

  # Job 3: Test Dependencies
  test-deps:
    name: 📦 Test Dependencies
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 🧪 Test Frontend Dependencies
        working-directory: ./frontend-app
        run: |
          if [ -f "package.json" ]; then
            echo "📦 Testing frontend dependencies..."
            npm install
            echo "✅ Frontend dependencies OK"
          else
            echo "⚠️ No frontend package.json found"
          fi

      - name: 🧪 Test API Gateway Dependencies
        working-directory: ./api-gateway
        run: |
          if [ -f "package.json" ]; then
            echo "📦 Testing API Gateway dependencies..."
            npm install
            echo "✅ API Gateway dependencies OK"
          else
            echo "⚠️ No API Gateway package.json found"
          fi

  # Job 4: Rapport final
  test-report:
    name: 📊 Test Report
    runs-on: ubuntu-latest
    needs: [validate, test-build, test-deps]
    if: always()
    
    steps:
      - name: 📊 Generate Test Report
        run: |
          echo "📊 RAPPORT DE TEST SIMPLIFIÉ"
          echo "============================"
          echo ""
          
          if [[ "${{ needs.validate.result }}" == "success" ]]; then
            echo "✅ Project validation: PASSED"
          else
            echo "❌ Project validation: FAILED"
          fi
          
          if [[ "${{ needs.test-build.result }}" == "success" ]]; then
            echo "✅ Docker build tests: PASSED"
          else
            echo "❌ Docker build tests: FAILED"
          fi
          
          if [[ "${{ needs.test-deps.result }}" == "success" ]]; then
            echo "✅ Dependencies tests: PASSED"
          else
            echo "❌ Dependencies tests: FAILED"
          fi
          
          echo ""
          echo "🎯 Tests terminés à $(date)"
          
          # Compter les succès
          success_count=0
          if [[ "${{ needs.validate.result }}" == "success" ]]; then
            ((success_count++))
          fi
          if [[ "${{ needs.test-build.result }}" == "success" ]]; then
            ((success_count++))
          fi
          if [[ "${{ needs.test-deps.result }}" == "success" ]]; then
            ((success_count++))
          fi
          
          echo "📈 Score: $success_count/3 tests réussis"
          
          if [[ $success_count -eq 3 ]]; then
            echo "🎉 Tous les tests sont réussis!"
          elif [[ $success_count -ge 2 ]]; then
            echo "⚠️ Tests majoritairement réussis"
          else
            echo "💥 Échec critique des tests"
            exit 1
          fi 